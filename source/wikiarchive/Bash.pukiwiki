#contents
#title

*Gentoo と Bash [#s3627399]

Bash言語のことです。

Linux の標準シェルです。[[Portage]] は [[app-shells/bash]] を必要としますが、[[app-shells/tcsh]] や [[app-shells/zsh]] を愛用している方が改宗する必要はありません。

創始者の思想により [[*.ebuild]] のスクリプトに選ばれています。残念ながら Linux 入門書に説明のある "Bourne shell" では [[*.ebuild]] が処理できません。[[sys-apps/busybox]] でも処理できません。[[Portage]]、[[Bash]] ([[ebuildとbash]])、[[C]]、[[Python]] に関連記事があります。

[[Java]] や [[PHP]] や [[Haskell]] や……といったプログラミング言語(スクリプト言語含む)の群れから学ぶ際に、表記方法だけが異なり考え方が同じの言語よりも全く考え方が異なる言語を 2 つ 3 つ覚えるのが面白いと思います。例えば [[Lisp]] と [[C]] と [[C++]] は全く違います。どれが一番良いというのも解決する問題によって違います。と言ってもソフトウェア工学や会計といった視点から選択できない場面が多いでしょうし、計算機科学での問題解決の視点が分かれば良いはずなので、これだけに夢中にならないで下さい。

***「Bash」(辞書検索例) [#wbb21017]

[[wikipedia:http://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8]]の「[[Bash:http://ja.wikipedia.org/wiki/Bash]]」参考。

*Bash を学ぶ [#bd5d3f3e]

本家への案内を意識すると、[[Bash]] の知識は必要とされます。

基本的にスクリプト言語を複雑なことに活用したいのでしたら [[app-shells/bash]] ではなく、[[dev-lang/perl]], [[dev-lang/python]], [[dev-lang/ruby]] などを選んで下さい。作成したスクリプトの寿命が違います。

`man bash` で情報が得られます。分り難かったり、もの足りなければ入門書(例えば O'REILLY の『入門 bash 第2版』)もあります。2005 年 09 月中旬時点の話では Bash-3.0 対応のものが近日発売されるらしいですが [[Gentoo]] で最新版を追いかける必要もありません。基本的にシェルスクリプトは [[sys-apps/busybox]] ([[sys-apps/coreutils]], [[sys-apps/util-linux]], [[sys-apps/sed]], [[sys-apps/gawk]], [[app-shells/ash]] 等の基本コマンド群の代用品を含むソフトウェア)の範囲を覚えれば十分のはずですが、残念ながら [[*.ebuild]] はその範囲を越えてしまっています。

**シェルとして使うためのインタラクティブ機能強化 [#k76b6856]

[[sys-libs/readline]] は最初から[[マージ]]されています。~/.inputrc をいじれば、コマンドライン入力を [[app-editors/emacs]] 風や [[app-editors/vim]] (vi) 風にしてくれます。

[[emerge]] 等には補完機能が便利です。emerge コマンドだけでなく、tar コマンド や cp コマンドの引数を覚えなくて済みます。[[app-shells/bash]] が [[sys-apps/busybox]] に勝る点です。[[app-shells/bash-completion]] に関連記事があります。

**ソフトウェアエンジニアリング [#nf539df3]

プログラミング言語やスクリプト言語だけに夢中にならないで下さい。品質保証やモデリングやダイアグラミングなど書籍が沢山あると思います。セキュアなコードについても忘れないで下さい。

**Gentoo は 11000 種 24000 枚もあるから自分でプログラミングする機会がないのですか？ [#m0729e72]

[[Portageツリー]]に登録されていないソフトウェアを[[バグ報告]]で申請もしくは [[Portageオーバーレイ]]へ追加するとしてその数が 100000 になったとしても新しいソフトウェアはこれからも必要とされます。新しい次元では 0 種 0 枚だからです。10 年後でも同じです。それにプログラミングは 10 年後でもきっと面白いです。一から作るのは楽しいです。既にあるウェブサービス分野や人工知能分野やデータベース分野や……も価値を作るなり変えるなり壊すなりすれば新しい次元です。これも楽しいです。ソフトウェア工学、離散数学、数値計算、……は問題解決の助けになるかもしれません。保守も忘れないで下さい。

例として [[Gentoo]] で熱意あるプロジェクトの一つに [[Science プロジェクト:http://www.gentoo.org/proj/en/science/index.xml]] があります。LAPACK (計算ライブラリ)と BLAS (LAPACK の高速処理ライブラリ)について説明があります。並列プログラミングのドキュメントはありませんが、 MPI (並列処理ライブラリ)は複数候補より選択できます。`eix --description "mpi( |＼)|$)"` で分ります。Beowulf (PC クラスタの概念)の直接的なドキュメントはありませんが、 [[Gentoo]] の得意分野の一つです。もしかしたら「ジェンツー愛好者は数学系も [[Fortran]] や [[C]] や [[Lisp]] で誰もが記述しそう」と思うかもしれませんが、[[sci-mathematics/octave]] (Matlab 系の GPL-2 ライセンス)や [[sci-mathematics/maxima]] (Macsyma 系の GPL-2/AECA ライセンス)や [[dev-lang/R]] (S 系の GPL-2/LGPL-2.1 ライセンス) ……といったソフトウェアが揃ってます。

**コードを書く時間と本を読む時間 [#cb597758]

これから[[メタ・ディストリビューション]]を始める人は、どちらかに偏り過ぎないで下さい。コードを書く時間だけでは好悪による不安定な問題解決になり、本を読む時間だけでは一般化し過ぎて前提条件と現場の変化に対応できないからです。形式知や暗黙知は経営学の範囲ですが難しく考えず、時間の許す限り、コードを書いて勉強してコードを書いて勉強して……を繰返してみて下さい。

________

-[2005-09-19] UNIX 系はシェルを覚えるのが原則だと思うので、シェルスクリプトも "Bourne shell" までは入門書に記述してあると思います。Gentoo で使われているシェルスクリプトは入門書の範囲を越えていますが、2000 年当時は busybox (sys-apps/coreutils, sys-apps/util-linux, sys-apps/sed, sys-apps/gawk, app-shells/ash 等の基本コマンド群の代用品を含むソフトウェア) は存在していなかったと思います。 (yoshino)
-[2006-09-17] 自分が調べた際のメモをほぼそのまま貼りつけているだけだったのを省察しました。 (yoshino)
