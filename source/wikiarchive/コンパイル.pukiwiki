#contents
#title

*ジェンツーにとってコンパイルとバイナリパッケージとは... [#uf70124e]

>しかしGENTOO LINUXの精神は"全てはソースから"ではありません。"全てはソースから"は重要なGENTOOの特徴の一つで、そして継続して必要とされるものではあります。しかしそれはたった一つの最も根本的な事ではありません。最も根本的な事は"科学技術は自分や他の利用者がしたいと思う事を束縛無しにできる事を許す設計であること"です。

>もし私達のツールがバイナリパッケージをサポートしないなら、私達は自分達のツールが利用者に彼や彼女がしたいと思うかもしれない事を全て可能にしていると主張する事ができません。もし私達が故意にバイナリパッケージをサポートを除外するとすれば、私達自分自身の希望やどのように問題にアプローチするべきかについての見解を押しつけ、代わりにどのように利用者が特定の問題にアプローチするかを選択するかという事に(パッケージを提供するのとは別の方法で)干渉する事を試みています。

以上、[[Philosophy:http://www.gentoo.org/main/en/philosophy.xml]] ([[日本語:http://wiki.gentoo.gr.jp/index.php?%5B%5B%BC%C1%CC%E4%5D%5D]])より引用。(誤字訂正)

**Intel 社の仮想化技術の説明会に設計者は何故 Gentoo Linux を選んだのか... [#q6285766]

そもそも本家には [[PR プロジェクト:http://www.gentoo.org/proj/en/pr/index.xml]]や [[Documentation プロジェクト:http://www.gentoo.org/proj/en/gdp/index.xml]]があります。[[GWN サブプロジェクト:http://www.gentoo.org/proj/en/pr/gwn.xml]]が発行している [[GWN]] や[[公式サイト:http://www.gentoo.org/]]のページを幾つか読んで貰うのが雰囲気を伝えるには早い気がします。

技術的価値以外に、「わくわくする」とか「こころときめく」とかが少なくないようです。例えば NASA (米航空宇宙局)で採用された際のインタビュー記事でもそんなことが書かれてます。デベロッパの視点のもありますが、ユーザの視点のもあります。尖った個人というより、適材適所を実行するメリット云々に近いです。

***Ottawa Linuxシンポジウムでの Intel 社の仮想化技術の説明会に設計者は何故 Gentoo Linux を選んだのか... (インタビューに「面白いから」と答えられる人達はカッコイイですね。) [#fe48cd11]

> Intelの設計者、Gordon McFaddenによって仮想化のテストセットアップについて説明があったことを報告しています。そのテストには、User-Mode-Linux (UML)サーバのホストとしてカーネル　2.6.11とXFSファイルシステムをチョイスしたGentoo Linuxが使われています。Gentooを使用した理由は、哲学的ではなく、単純に今まで使ったことが無くて、何か新しいものを試してみたかったからです。

過去の [[GWN]] より転載。

*「メタ・ディストリビューションする」とは「コンパイル・ジャンキーになる」ではない [#re43e416]

[[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]] で発生する現象の1つです。体感しやすいため「[[インストール]]」と同じく [[Gentoo Linux:http://wiki.gentoo.gr.jp/index.php?GentooLinux]] の総合評価に繋がり易く、肯定的な意味でも否定的な意味でも用いられます。「ユーザの声を聞くより、ユーザの行動を観察する」にしても、失敗する人が多いのは事実で、少しづつですが改善されてます。アンケートもしてます。

[[メタ・ディストリビューション]]の様な[[コンパイル]]の連鎖を制御する事から生まれる概念もあります。[[最適化]]も[[セキュリティ]]も[[ディスクレス]]も[[メタ・ディストリビューション]]の1つです。慣れないと[[コンパイル]]を繰り返し時間を浪費するだけかもしれませんが、ライブラリの依存地獄がないため結果的に早くなることもあります。明らかな間違いでもなければ暫く使ってみてから再調整してみて下さい。USE="static" も可能です。[[メタ・ディストリビューション]]に関連記事があります。

古いシステム全体を更新するのに便利な `emerge world` ですが、もの凄い量が対象になります。注意して下さい。最低限必要な[[ビルド]]は [[GLSA]] だけで、`emerge world` ではありません。[[GLSA]] こと "[[Gentoo Linux Security Announcements:http://wiki.gentoo.gr.jp/index.php?GentooLinuxSecurityAnnouncements]]" (または "[[Gentoo Linux Security Advisories:http://wiki.gentoo.gr.jp/index.php?GentooLinuxSecurityAdvisories]]") は [[Securityプロジェクト:http://www.gentoo.org/proj/en/security/index.xml]]による脆弱性注意報告です。

**メタ・ディストリビューションに夢中にならない [#u1a12b48]

10 回も 20 回もするものではありません。ユーザが指示するカスタマイゼーション機能は強化されても自動学習するパーソナライゼーション機能はむしろ外されています。[[ハンドブック]]でも分りますが、システム側が原因の間違いを起こさないが優先されてます。候補の提案ぐらいは復活しても良いと思いますが。明らかな間違いでもなければ暫く使ってみてから再調整してみて下さい。

**コンパイルとバイナリパッケージ [#n48f2daf]

[[emerge]] はソース・マージ形式だけでなく、バイナリ・マージ形式もサポートしています。バイナリファイルしか配布されていないパッケージの他、巨大なパッケージに対しても有効です。[[Gentoo Linux ドキュメントリスト:http://www.gentoo.org/doc/ja/index.xml?catid=gentoo]]にあります。

[[Gentoo]]が 1 台の場合は「本家配布の [[GRP]] を利用する」または「△△-binパッケージを利用する」ことになります。

[[Gentoo]]が 2 台以上の場合は分散(クロス・)コンパイル環境や共有ファイルシステム下に [[Portageツリー]] 配置をした上で、「[[Portage変数]] の $FEATURES="buildpkg"」や「[[sys-apps/portage]] の quickpkg コマンドで作成する」や「[[dev-utils/catalyst]] の catalyst コマンドで [[GRP]] を作成する」ことになります。[[ディスクレス]]も選択肢です。基本的に、[[コンパイラ]]を必要とする [[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]] は 1 つ(分散させる場合は複数)で十分です。他の [[Gentoo]] は[[コンパイラ]]がなくとも大丈夫です。成果物を共有します。

*ビルドの連鎖とは... [#n39dd50d]

例えば [[C]] で言うと、[[sys-devel/gcc]] は以下の作業を抽象化しています。

C 言語ソースコード <=> gcc foo.c~
↓...プリプロセッサ~
前処理済みのソースコード~
↓...コンパイラ~
アセンブリ言語プログラム~
↓...アセンブラ~
オブジェクトコード~
↓...リンケージエディッタ~
実行可能プログラム

[[Portage]] は何百回と繰り返す make, configure, gcc を抽象化しています。[[emerge]] を使えば以下の作業をコマンド1つで代用できます。つまり最終形態を伝えれば、追加・削除・再マージに必要なパッケージを自動計算してくれます。コアに近い [[USEフラグ]]を変更すると物凄い量が列挙されます。基本的にライブラリの依存地獄とは無縁ですが、[[Slot]] も自動計算してくれます。

fooパッケージのmake  <=>  emerge qux~
↓~
barパッケージのmake~
↓~
bazパッケージのmake~
↓~
...snip...~
↓~
quxパッケージのmake

ここで foo パッケージに標準ではない waldo パッケージと garply パッケージを使う事になったとします。更に bar パッケージと baz パッケージが不要になったとします。本来であれば以下の様にやり直さなければいけませんが、[[emerge]] を使えば以下の作業を( [[USEフラグ]]で指示した後)コマンド1つで代用できます。

barパッケージのuninstall  <=>  USE="hoge -fuga" emerge qux~
↓~
bazパッケージのuninstall~
↓~
waldoパッケージのmake~
↓~
garplyパッケージのmake~
↓~
fooパッケージのmake~
↓~
...snip...~
↓~
quxパッケージのmake

**sys-devel/gcc とは... [#t17fa7ed]

[[Portage]] では [[C]] の知識よりもツールの知識が求められます。[[sys-devel/gcc]] はプログラミング言語のソースコードからマシンが実行できるオブジェクトを作り出すものです。[[sys-devel/gcc]] の説明は [[Gentoo]] の範疇ではありませんが、簡単に紹介します。オンラインマニュアルが整ってますが、解説書も出版されています。例えば CQ 出版社の『TECH I vol.29 実例で学ぶGCCの本格的活用法』は sys-devel/gcc-4.0 のコマンドオプションを 250 ページ以上に渡り解説しています。[[Portage]]、[[Bash]] ([[ebuildとbash]])、[[C]]、[[Python]] に関連記事があります。

- gcc のプリプロセッサが source file から preprocessing file を作り、
- gcc のコンパイラが preprocessing file から assemble file を作り、
- gcc のアセンブラが assemble file から relocatable binary program を作り、
- gcc のリンケージエディッタが relocatable binary program から executable load module を作ります。

プリプロセッサもコンパイラもアセンブラもリンケージエディッタも gcc コマンドで制御できます。最終的に作られる executable load module は色々カスタマイズできます。例えば以下の様なことができます。

- デバッグツールに必要な情報を追加する
- プロファイルツールに必要な情報を追加する
- 実行速度優先の最適化をする
- 軽量化優先の最適化をする
- 実行に必要ない部分を削除する
- コンパイルするホストとは別のマシンで動作させる
- 静的ライブラリと動的ライブラリの選択による調整をする
- ライブラリの選択でライセンスの選択幅を増減させる
- デフォルトではオフの機能をオンにする
- デフォルトではオンの機能をオフにする
- 標準的でない言語解析をする
- ...snip...

gcc コマンドは 1 つのパッケージを対象にします。ちなみに [[Portage]] が動作するのに必要最低限とされる [[Stage]] (Stage3) でも、50 以上のパッケージが必要とされます。デスクトップに使えば 100 や 200 でも足りないかもしれません。

**root:root 権限から portage:portage 権限 [#uf656651]

root 権限なしで [[emerge]] できるようにしたほうがいいかもしれません。ちなみに "アクセスエラー" は [[sandbox]] であり、root:root 権限でも発生します。

[[Portage]] の uid/gid は制御できます。

 useradd -u 250 -g 250 -s /bin/false portage
 groupadd -g 250 portage
 chown -R portage:portage /usr/portage
 chown -R portage:portage /var/tmp/portage

アプリケーションが使う uid/gid は [[GLEP]] の 027 で提起されてます。説明(方針？)はあるものの、曖昧なものもあります。そんな時こそ[[バグ報告]]です。

**コンパイル中、全体を遅くしたくない [#na7f262c]

優先度を下げます。/etc/make.conf に以下のように記述します。

 PORTAGE_NICENESS="15"

**画面を眺めないで短縮化 [#w90e2cd9]

出力内容を描写させなければ早くなります。単純にコンパイル後に画面を眺めず、違う TTY を表示させるだけです。フレームバッファ環境では2割以上早くなる人もいるかもしれません。

$PORT_LOGDIR 内には各パッケージ毎に出力が保存されます。

**中断とデタッチ [#w2813ce9]

[[emerge]] プロセスを kill するだけです。再開するには(作業の重複になりますが)中断した箇所の先頭から同じ命令を下すだけです。関連した引数としては --resume, --skipfirst があります。

コンピュータの電源を落すのでもなければ、中断するよりもっと良い方法があります。$PORTAGE_NICENESS (優先度)でも下げた状態にして、[[misc-apps/screen]] の screen コマンド (detach) を使いログアウトします。これで席から離れられます。その場で待つ必要はありません。root 権限なしで [[emerge]] できるようにしたほうがいいかもしれません。

別のホストから [[net-misc/openssh]] の ssh コマンドで接続し、ログイン後 [[misc-apps/screen]] の screen コマンド (reattach) すればさきほどまでのローカルの続きができます。大幅な変更を加え `emerge world` や `emerge system` が必要になった時などに使います。

**メモリ上にファイルシステムを作り、其処でコンパイル [#y9468ebe]

メモリ上にファイルシステムを作り、其処で[[コンパイル]]させます。/var/tmp/portage がそれです。メモリが足りなくならないような贅沢な環境で行って下さい。[[ドキュメントリスト:http://www.gentoo.org/doc/ja/list.xml]]にあります。

**ディスクレス [#g52bed7e]

上の tmpfs の様な[[コンパイル]]の時だけでなく、ブートからシャットダウンまでハードディスクを必要としません。[[ドキュメントリスト:http://www.gentoo.org/doc/ja/list.xml]]にあります。

**コンパイルのキャッシュ [#cc380a2c]

[[dev-util/ccache]] を利用します。

**複数のマシンで分散処理 [#t39d7c4d]

[[sys-devel/distcc]] と [[dev-util/ccache]] は同時に利用できます。[[sys-devel/gcc]] は同じにする必要があるので、高速マシンは複数の [[sys-devel/gcc]] を持つかもしれません。主役が非力の場合、主役を参加させない方が早いかもしれません。マウントポイントをルートディレクトリにするように変更もできます。[[ドキュメントリスト:http://www.gentoo.org/doc/ja/list.xml]]にあります。

**異なるアーキテクチャで動かすためのクロス・コンパイル [#raeeb934]

[[sys-devel/crossdev]] を[[マージ]]し、`crossdev -t help` を実行すれば分りますが、[[Gentoo]] が [[profile]] でサポートしていないアーキテクチャも作成できるようです。ちなみに help では登場しませんがソースコードで「bfin*」等だけでなく「cris*」「vax*」の項目もあるので将来は追加されるかもしれません。「linux」等だけでなく「freebsd」もあります。「uclibc」等だけでなく「dietlibc」もあります。

**最適化 [#p00835c1]

[[catalyst]] 以降、デフォルトのコンパイルフラグはかなり抑えられています。QA (品質保証)、メタ・ディストリビューション、ハードウェア、、、理由は長くなるので省きます。解決策の1つになると思われるパッケージ毎にコンパイルフラグを制御する機能は今のところありません。[[最適化]]に関連記事があります。

*エラーで困った場合には... [#s52247ce]

[[emerge]] に関連記事があります。

________

[[Gentoo]] ([[Gentoo Linux:http://wiki.gentoo.gr.jp/index.php?GentooLinux]]) の詳細は[[プロジェクトリスト:http://www.gentoo.org/proj/en/metastructure/projects.xml]]が確実です。短時間で概要を説明しようとしたものが以下にあります。気にいったら足して下さい。

- [[Gentoo]] ([[Gentoo Linux:http://wiki.gentoo.gr.jp/index.php?GentooLinux]]), [[Gentoo FAQ:http://www.gentoo.org/doc/ja/?catid=faq]], [[GentooJP FAQ:http://wiki.gentoo.gr.jp/index.php?%5B%5B%A3%C6%A3%C1%A3%D1%5D%5D]]
- [[インストール]], [[Stage]], [[GRP]], [[Portageツリー]]
- [[インストールした後にできること]], [[日本語入力設定事例集]], [[日本語デスクトップ環境/パッケージ]]
- [[Gentooが採用している技術]]
- [[コミュニティとの連絡手段]], [[Bugtracking System (Bugzilla):http://wiki.gentoo.gr.jp/index.php?BugtrackingSystem]]
- [[本家に関連しそうな言葉]], [[GLEP]], [[コピーライト]], [[ライセンス]]

[[Portage]] ([[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]]) の詳細は[[ドキュメントリスト:http://www.gentoo.org/doc/ja/list.xml]]が確実です。短時間で概要を説明しようとしたものが以下にあります。気にいったら足して下さい。

- [[Portage]] ([[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]])
- [[メタ・ディストリビューション]], [[USEフラグ]], [[profile]], [[catalyst]], [[GNAP]]
- [[コンパイル]], [[バイナリパッケージ]]
- [[portageとその周辺ツール]], [[portageに関連しそうな言葉]]
- [[ebuildパッケージ]], [[ebuildに関連しそうな言葉]]

________

-[2005-09-19]
-[2006-09-17] 自分が調べた際のメモをほぼそのまま貼りつけているだけだったのを省察しました。 (yoshino)
