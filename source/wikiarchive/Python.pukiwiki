#contents
#title

*Gentoo と Python [#i856f387]

Python言語のことです。

[[Portage]] のエラーメッセージなどを初めて見ると「Gentoo に Python は必須かも……」と不安になるかもしれませんが、それはないです。[[Perl]] や [[Ruby]] を愛用している方が改宗する必要はありません。

創始者の思想により [[Portage]] のコアを記述する言語に選ばれています。中核を担うため、他の [[Python]] に依存するパッケージとからまるとしばしば [[Slot]] の対象になります。[[Slot]] になるものはどの実行ファイルを使うのか明示する必要があります。変更する際はライブラリの扱いも忘れないで下さい。[[dev-lang/python]] の場合 python-updater コマンドです。[[Portage]]、[[Bash]] ([[ebuildとbash]])、[[C]]、[[Python]] に関連記事があります。

[[Java]] や [[PHP]] や [[Haskell]] や……といったプログラミング言語(スクリプト言語含む)の群れから学ぶ際に、表記方法だけが異なり考え方が同じの言語よりも全く考え方が異なる言語を 2 つ 3 つ覚えるのが面白いと思います。例えば [[Lisp]] と [[C]] と [[C++]] は全く違います。どれが一番良いというのも解決する問題によって違います。と言ってもソフトウェア工学や会計といった視点から選択できない場面が多いでしょうし、計算機科学での問題解決の視点が分かれば良いはずなので、これだけに夢中にならないで下さい。

***「Python」(辞書検索例) [#jff6bc6f]

[[wikipedia:http://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8]] の「[[Python:http://ja.wikipedia.org/wiki/Python]]」参考。

*Python を学ぶ [#rf002a4b]

本家への案内を意識すると、[[Python]] の知識は必ずしも必要とされません。

「何百ページもあるマニュアルを読む気はないけど、全体像はどうなっているのか知りたい」と軽い情報収集が目的なら [[Python-wiki:http://wiki.python.org/moin/]] を 1 時間ぐらい眺めていると雰囲気が捕めます。海外サイトで情報収集するのが無難です。プログラミングの授業を受けた人向けの記事が多い印象がありますが、言語で評価されている部分はマニア向けの機能ではなく、初学者が最初の一ヶ月間で感じられる部分です。

[[日本語マニュアル:http://www.python.jp/doc/]]で詳細が得られます。分り難かったり、もの足りなければ入門書(例えば O'REILLY の『初めてのPython 第2版』)もあります。Expression で List-Comprehension とか Lambda とか Generator とか記述したいのでなければ [[Gentoo]] で最新版を追いかける必要もありません。総合開発環境も無料で入手できます。

**シェルの代用として使うためのインタラクティブ機能強化 [#h83404c0]

[[sys-libs/readline]] は最初から[[マージ]]されています。~/.inputrc をいじれば、コマンドライン入力を [[app-editors/emacs]] 風や [[app-editors/vim]] (vi) 風にしてくれます。

[[dev-lang/python]] はそのままでもインタラクティブ機能が他スクリプト言語と比べ優れていますが、 [[dev-python/ipython]] は更にモジュール名の補完機能やデバッグ機能が強化されています。[[マージ]]しただけで利用できます。ipython コマンドを実行してみてください。

**ソフトウェアエンジニアリング [#l4581def]

プログラミング言語やスクリプト言語だけに夢中にならないで下さい。品質保証やモデリングやダイアグラミングなど書籍が沢山あると思います。セキュアなコードについても忘れないで下さい。

**Gentoo は 11000 種 24000 枚もあるから自分でプログラミングする機会がないのですか？ [#j5cf4372]

[[Portageツリー]]に登録されていないソフトウェアを[[バグ報告]]で申請もしくは [[Portageオーバーレイ]]へ追加するとしてその数が 100000 になったとしても新しいソフトウェアはこれからも必要とされます。新しい次元では 0 種 0 枚だからです。10 年後でも同じです。それにプログラミングは 10 年後でもきっと面白いです。一から作るのは楽しいです。既にあるウェブサービス分野や人工知能分野やデータベース分野や……も価値を作るなり変えるなり壊すなりすれば新しい次元です。これも楽しいです。ソフトウェア工学、離散数学、数値計算、……は問題解決の助けになるかもしれません。保守も忘れないで下さい。

例として [[Gentoo]] で熱意あるプロジェクトの一つに [[Science プロジェクト:http://www.gentoo.org/proj/en/science/index.xml]] があります。LAPACK (計算ライブラリ)と BLAS (LAPACK の高速処理ライブラリ)について説明があります。並列プログラミングのドキュメントはありませんが、 MPI (並列処理ライブラリ)は複数候補より選択できます。`eix --description "mpi( |＼)|$)"` で分ります。Beowulf (PC クラスタの概念)の直接的なドキュメントはありませんが、 [[Gentoo]] の得意分野の一つです。もしかしたら「ジェンツー愛好者は数学系も [[Fortran]] や [[C]] や [[Lisp]] で誰もが記述しそう」と思うかもしれませんが、[[sci-mathematics/octave]] (Matlab 系の GPL-2 ライセンス)や [[sci-mathematics/maxima]] (Macsyma 系の GPL-2/AECA ライセンス)や [[dev-lang/R]] (S 系の GPL-2/LGPL-2.1 ライセンス) ……といったソフトウェアが揃ってます。

**コードを書く時間と本を読む時間 [#l1fdac56]

これから[[メタ・ディストリビューション]]を始める人は、どちらかに偏り過ぎないで下さい。コードを書く時間だけでは好悪による不安定な問題解決になり、本を読む時間だけでは一般化し過ぎて前提条件と現場の変化に対応できないからです。形式知や暗黙知は経営学の範囲ですが難しく考えず、時間の許す限り、コードを書いて勉強してコードを書いて勉強して……を繰返してみて下さい。

________

-[2005-09-19] ドキュメントがプログラミングの授業を受けた人向けが多いけれど、プログラミングを本職にしない人こそが恩恵をうけられる気がします。そういった意味では Python の良さは入門書で感じられるものが全てで、深追いする必要はないと思います。 (yoshino)
-[2006-09-17] 自分が調べた際のメモをほぼそのまま貼りつけているだけだったのを省察しました。 (yoshino)
