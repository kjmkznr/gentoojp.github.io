#contents
#title

*パッケージ管理コマンド比較 [#d7a46141]

[[パッケージ管理コマンド比較]]にあります。

*emerge を覚えた次は... [#q926e655]

rpmパッケージや dpkgパッケージに相当するものが [[ebuildパッケージ]]です。但しバイナリファイルを基本とするかソースファイルを基本とするかの違いはあります。spec や deb に相当するものが [[*.ebuild]] であり、それを低い視点から操作するものが [[ebuild]] コマンドです。

yum や apt に相当するもっと高い視点から操作するものは [[emerge]] コマンドです。[[emerge]] コマンドは依存関係の自動計算の他、[[USEフラグ]]のオンオフによる[[メタ・ディストリビューション]]ができます。

app-portage/* が [[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]] に関係するものです。管理システムの中核は [[Python]]、パッケージの中核は [[Bash]] ですが、ツールにはその様な制限や方針はありません。[[Perl]] で作られたものも [[C]] で作られたものもあります。

***sys-apps/portage, sys-apps/sandbox [#d4ef61ad]
:sys-apps/portage|[[emerge]] コマンド、[[ebuild]] コマンドが含まれます。[[sys-apps/portage]] に関連記事があります。
:sys-apps/sandbox|[[sandbox]] に関連記事があります。

***sys-apps/portage 以外の ebuildパッケージを操作できるもの [#g2f7ff56]

[[sys-apps/portage]] の操作に馴染めない場合には他のパッケージ・ハンドラもあります。基本的に [[emerge]] や [[ebuild]] の弱い部分を補強するには [[app-portage/eix]] や [[app-portage/gentoolkit]] といった他パッケージが必要ですが、後発のものは単体で供えてます。

-- [[sys-apps/portage:http://www.gentoo.org/proj/en/portage/index.xml]]; CUI (Python, Bash)
-- [[sys-apps/paludis:http://paludis.pioto.org/]]; CUI (C++, Bash)
-- [[sys-apps/pkgcore:http://www.pkgcore.org]]; CUI (C, Python, Bash)
-- 他にもあります。

-- [[app-portage/gportage:http://www.stacken.kth.se/%7Efoo/gentoo/]]; GTK+
-- [[app-portage/gnoportage:http://gnoportage.sourceforge.net/]]; GTK+
-- [[app-portage/portageGUI:http://www.clarkson.edu/projects/cosi/fa2004/hernejj/PortageGUI.pdf]]; GTK+ (C)
-- [[app-portage/portato:http://sourceforge.net/projects/portato]]; GTK+, Qt (Python)
-- [[app-portage/porthole:http://porthole.sourceforge.net/]]; GTK+ (Python)
-- [[app-portage/himerge:http://www.haskell.org/himerge/]]; GTK+ (Haskell !! )
-- [[app-portage/kmerge:http://kemerge.sourceforge.net/]]; Qt
-- [[app-portage/kportage:http://www.nongnu.org/kportage/]]; Qt
-- [[app-portage/kentoo:http://www.ralfhoelzer.com/kentoo.html]]; Qt
-- [[app-portage/guitoo:http://guitoo.sourceforge.net/]]; Qt
-- [[app-portage/kuroo:http://kuroo.org/]]; Qt (C++)
-- [[app-portage/maintainer-helper:http://dev.gentoo.org/~jokey/maintainer-helper]]; Qt (Python)
-- [[app-portage/portagemaster:http://portagemaster.sourceforge.net/]]; Java
-- 他にもあります。

***カスタマイゼーションとパーソナライゼーション [#we86b340]

[[emerge]] に関連記事があります。

***Portage に数えられないが関連が深いもの [#je3d0e53]

[[カーネル]]や[[コンパイラ]]や[[ログイン]]関係は [[Portage]] に限らない話ですので、Unix や Linux 関係の適当な参考書に載っていると思います。以下は参考書とは違う独特な変更が加えられているものです。

- [[sys-apps/baselayout]]
- [[sys-fs/udev]]

**ebuildパッケージに関するもの... [#r4664c04]

***app-portage/gentoolkit [#eee2b44d]
:app-portage/gentoolkit|絶対必要でもないけれど、ユーザが使う際にあったら便利なものです。[[app-portage/gentoolkit]] に関連記事があります。[[app-portage/portage-utils]] で代替できつつあります。幾つか代替できていないものがあります。

***app-portage/gentoolkit-dev [#uf1dbcbd]
:app-portage/gentoolkit-dev|絶対必要でもないけれど、デベロッパが使う際にあったら便利なものです。[[app-portage/gentoolkit-dev]] に関連記事があります。

***app-portage/eix [#q316cca5]
:app-portage/eix|11000種以上、24000枚以上の [[*.ebuild]] を検索します。[[app-portage/eix]] に関連記事があります。2005年辺りから形になったもので、高速です。

***app-portage/herdstat [#l7bf43e7]
:app-portage/herdstat|[[metadata.xml]] を検索します。[[sys-portage/herdstat]] に関連記事があります。2005年辺りから形になったもので、高速です。

***app-portage/portage-utils [#cad3fa8e]
:app-portage/portage-utils|絶対必要でもないけれど、ユーザが使う際にあったら便利なものです。[[app-portage/portage-utils]] に関連記事があります。2005年辺りから形になったもので、高速です。

**操作感覚を向上させるもの... [#w270310c]

***app-shells/bash-completion [#bc25207a]
:app-shells/bash-completion|コマンドラインの引数の暗記に嫌気を感じたら試してみて下さい。[[app-shells/bash-completion]] に関連記事があります。

***app-admin/eselect [#u8d54670]
:app-admin/eselect|どのディストリビューションでも同様なものがありますが、1 つ 1 つコマンドでやってもいいけれど統一した操作であると嬉しいちょっとしたスクリプトのジェンツー版です。[[app-admin/eselect]] に関連記事があります。

***sys-kernel/genkernel, sys-kernel/module-rebuild, app-portage/genflags [#p9a237d5]
:sys-kernel/genkernel|カーネルコンパイルが楽になります。[[sys-kernel/genkernel]] に関連記事があります。
:sys-kernel/module-rebuild|モジュールコンパイルが楽になります。[[sys-kernel/module-rebuild]] に関連記事があります。
:app-portage/genflags|[[app-portage/genflags]] に関連記事があります。

***x11-misc/xac, x11-misc/mkxf86config [#le6bc632]
:x11-misc/xac|[[x11-base/xorg-x11]] の本体にも同様のコマンドがありますが、xorg.conf を作成してくれます。[[x11-misc/xac]] に関連記事があります。
:x11-misc/mkxf86config|[[x11-base/xorg-x11]] の本体にも同様のコマンドがありますが、xorg.conf を作成してくれます。[[x11-misc/mkxf86config]] に関連記事があります。

***sys-devel/crossdev, sys-apps/setarch [#za092bce]
:sys-devel/crossdev|クロス・コンパイラが楽になります。[[sys-devel/crossdev]] に関連記事があります。
:sys-apps/setarch|アーキテクチャの指定が楽になります。[[sys-apps/setarch]] に関連記事があります。

***net-misc/keychain [#bd2fad64]
:net-misc/keychain|ssh が楽になります。[[net-misc/keychain]] に関連記事があります。

**新しい概念を加えるもの... [#i0d4e05d]

***dev-util/catalyst, dev-util/livecd-kconfig, dev-util/livecd-specs [#m49d8ba6]
:dev-util/catalyst|イメージを作成するのが楽になります。[[dev-util/catalyst]] に関連記事があります。
:dev-util/livecd-kconfig|[[livecd]] の真似が楽になります。[[dev-util/livecd-kconfig]] に関連記事があります。
:dev-util/livecd-specs|[[livecd]] の真似が楽になります。[[dev-util/livecd-specs]] に関連記事があります。

***dev-embedded/gnap [#x974e434]
:dev-embedded/gnap|32MB のイメージを作成するのが楽になります。[[dev-embedded/gnap]] に関連記事があります。

***app-portage/layman [#la1f5484]
:app-portage/layman|[[Portageオーバーレイ]] が楽になります。[[app-portage/layman]] に関連記事があります。

***app-portage/emerge-delta-webrsync [#x0b07bfe]
:app-portage/emerge-delta-webrsync|[[app-portage/emerge-delta-webrsync]] に関連記事があります。

***app-potage/deltup, app-portage/getdelta [#k59327d2]
:app-potage/deltup|[[app-potage/deltup]] に関連記事があります。
:app-portage/getdelta|[[app-portage/getdelta]] に関連記事があります。

**ebuild 開発環境 [#j722e207]

[[app-editors/emacs]]、[[app-editors/vim]]、[[app-editors/nano]] 辺りで記述するのに便利な設定は開発者ハンドブックにあります。グラフィカルな開発環境である [[app-portage/abeni]] は [[mask]] です。

*Gentoo Linux に足りないのは「System Imager」ツール... [#j2630946]

そもそも本家には [[PR プロジェクト:http://www.gentoo.org/proj/en/pr/index.xml]]や [[Documentation プロジェクト:http://www.gentoo.org/proj/en/gdp/index.xml]]があります。[[GWN サブプロジェクト:http://www.gentoo.org/proj/en/pr/gwn.xml]]が発行している [[GWN]] や[[公式サイト:http://www.gentoo.org/]]のページを幾つか読んで貰うのが雰囲気を伝えるには早い気がします。

技術的価値以外に、「わくわくする」とか「こころときめく」とかが少なくないようです。例えば NASA (米航空宇宙局)で採用された際のインタビュー記事でもそんなことが書かれてます。デベロッパの視点のもありますが、ユーザの視点のもあります。尖った個人というより、適材適所を実行するメリット云々に近いです。

***Bryan Green 氏が NASA (米航空宇宙局)のスーパーコンピュータ「コロンビア」(当時世界第二位)の一部に何故 Gentoo Linux を採用したのか... (その後、惑星の表面調査のための月面車「Scout」にも Gentoo Linux がメインで採用されてます) [#ve5fef7d]

> 私はNASA高度スーパーコンピュータ部門（以前は"Numerical Aerospace Simulation"を略してNASと呼ばれていました）で請負業者として働いており、それはカリフォルニアMountain ViewのNASA Ames Research Centerにあります。私はAMTIの従業員です。私はUCサンタクルスを卒業した1997年からNAS部門の科学的仮想グループの一員となっています。私が働き始めたときには、仮想化にSGI Onyxシステムを使用していましたが、NVIDIAが出現し、PCゲーマーのマーケットのグラフィックカード業界への圧力により、最終的にハイエンド NVIDIAグラフィックカードを搭載した一般的なLinuxシステムへと移行することができました。そのため、私たちはグラフィックハードウェアで何万何千ドルも節約することに貢献してくれたゲーマー達に感謝しています。私のグループのホームページはここにあります。 http://www.nas.nasa.gov/Resources/Visualization/visualization.html

> コロンビアスーパーコンピュータは、10,240プロセッサーのLinuxが稼働しているSGI Altixシステムで、2004にNASによって構築されました。これはIntel Itanium2プロセッサーを使用しており、512プロセッサーごとに20のノードの分けられています。それぞれの512プロセッサーのAltixのノードは1テラバイトの共有メモリとSingle System Image (SSI)を持っています。コロンビアに関するより詳しい情報と、そこで稼働している様々な種類の科学については以下のページで見ることができます。http://www.nas.nasa.gov/About/Projects/Columbia/columbia.html

> コロンビア自体は（SGI修正を行った）Suseベースのディストリビューションを使用していますが、NAS部門のセキュリティグループは基礎と特別なプロジェクトにはもっぱらGentooを使用しています。3つのノードのMosixクラスターがあるのにです。合計で、彼らは30のGentooシステムを配置しました。これに関してより詳しい情報が聞きたい人は、Derek Shawに連絡してみてください。

> コロンビアが構築されてから、私のグループの作業は主にコロンビアユーザへ仮想サポートを提供することになりました。ここ何日間の私たちの焦点は仮想コード自身を直接叩き、それが生成するデータを取り出すことです。私たちは16CPUノードである"chunnel"をコロンビアに接続しました。それぞれのシミュレーション段階で、計算されたデータを仮想メモリを等して取り出し、データをchunnelに提供し、仮想クラスタに配信します。以前のハリケーンシーズンには、この技術を使ってfvGCMで動画を作成しました。fvGCMとは、ハリケーン予報に使用される一般的定数回転モデル（finite -volume General Circulation Model）のことです。これは私たちがSC05で実演したアプリケーションの一つです。...snip...

> Hyperwallはごく普通のクラスタです。各ノードはデュアルコアOpteronのデュアルCPUで4Gのメモリを積んでいます。それぞれ普通にインストールしたGentooで、XorgとXfce、それにもちろんOpenGLにはNVIDIAのビデオドライバをインストールしています。ファイル共有にはNFSを使っています。ノード上のプログラムの起動といったことにはスクリプトを書きました。十字状に設置したスクリーン上から、グリッドの2次元位置から選択しますが、複数のノードを選択するのにはPerlの正規表現を使いました。写真の十字模様は「CROSS = N1. N.1」と表すことができます。「hyperX」というツールを使うと、マスタのコンソールからすべてもしくは複数の画面にまたがってカーソルを動かせます。これにはXTestプロトコルが使われています。アプリケーションの実行に、C++で分散オブジェクトとイベントアーキテクチャを作成しました。これがコロンビアの監視ツールで使われるフレームワークなのです。

> Gentooを選んだ理由は?

> クラスタにGentooをインストールしてみたかっただけなんです。最初に仕事で使うノートにGentooをインストール、慣れてきたころにワークステーションにインストールしました。それまで自分のグループではRedhatとFedoraばかりでした。Gentooではシステム管理がおもしろいので、Linuxに対する熱意にまた火が付いたんです。クラスタ向きのディストリビューションに思えたので、最初に小規模なhyperwall(最初のは 3x3でした)を構築した際にFedora用のパーティションに加えて、Gentooのパーティションも切っておきました。ずいぶん時間はかかったものの、最終的にうまく動作しました。そして2つめの3x3にGentooをインストールしました。SC05を構築する1週間前のことです。といっても最初の 3x3をコピーしてから、ちょっといじったのをアップデートしただけなのですけど。単純に実験してみたかったという理由以外には、幅広いアプリケーションが簡単に使えて、特定のパッケージを最新版にするのが楽なPortageが気に入って、Portageに頼るようになったからです。Fedoraだと、まだRPMになっていないパッケージを使うのはややこしいですし、yumは使いにくかったからです。

> このシステムにおけるGentooの最大のメリットはなんでしたか?デメリットや改善すべき部分はありましたか?

> まず、役に立つ情報、ドキュメンテーションやコミュニティによるサポートが得られやすいというのはとても貴重ですし、RedhatやFedoraにはなかったものだと思います。最新の3x3で起きた問題をなんとかするのにPortage overlayを作りました。手元のハードウェアには、NVIDIAのビデオドライバで安定性という面で大きな問題があったのです。NVIDIAに問題点の把握と修正を依頼したところ、パッチを作成してもらえました。最新のnvidia-kernel ebuildをPortage overlayに入れてから、パッチを当ててアップデートしました。パッケージマネージメントシステムで、手元でパッチを当てたビデオドライバを扱えるというのはとても素晴らしいことです。それにとても簡単でしたし。 Portageにはバイナリディストリビューションに比べてメリットがたくさんあります。パッケージがたくさんあるというのもそうですし、Portage の中をいろいろ見てみたり検索できるのは、どんなツールがあるのかを知るのにとてもいい方法です。特定のバージョンのパッケージをインストールできるというのも便利ですね。また、コマンドラインから少しづつシステムをアップデートしたり、一部のシステムだけをアップデートできるというのもメリットです。個人的な意見として、システム管理のすべてをコマンドラインから実行できる、つまりスクリプト化できるというのは、クラスタ環境での最高のメリットでしょう。クラスタで使う理由として、Gentoo Portageの柔軟性もあげられます。現在の構成では、NFS経由でPortageツリーを共有して、マスターではemergeのproxyに squidを使っています。rsyncで動機を取るのに自家製のスクリプトも使っています。他にも、ノードのOSをマスターのchroot環境にインストールして、そこから各ノードにインストールするといったことも試してみたいですね。 Xfceをデスクトップマネージャにしてからは非常に大きな改善が見られました。(Fedoraでは)Gnomeを使っていましたがいらないものが多すぎたのです。

> Gentooに足りないのは「SystemImager」ツールだと思います。「GentooImager」ebuildとでもいいましょうか。 RedHatとFedoraにはSystemImagerがあって、ディストリビューションで全てが完結します。つまり、SystemImagerとかをベースにして、dhcp、syslinuxやtftpなどの必要なツールを依存関係に含めるようなebuild、そんなGentooImagerです。さらに、pxebootでブートして、システムをブートストラップさせる環境を作成するとか、システムのイメージを作成するといった課題もあります。とにかく一考する価値があると思います。もし、別のhyperwallを作る機会があれば、そんなパッケージを作ってみるかもしれません。まぁ、見ていてください。Gentooをクラスタにインストールしたことがあって、管理経験もある人からの意見を聞いてみたいですね。

> ダメな点はといっても、hyperwallでGentooを使うことのデメリットというのは思い付きませんね。ただ、Gentooをインストールするのが初めてだったりしたらむずかしいでしょうけど。改善の余地があるとすれば、セキュリティアップデート周りと、emergeの最中に表示される重要なメッセージですね。こうした問題に関心が集まっているようでうれしい限りです。

> 今後、部門内でGentooをインストールする予定はありますか?

> いまのところ、自分はグループ内でうるさいGentoo推進論者に過ぎないのですよ。グループの数人になんとか興味を持たせることに成功しました。そのうち1人がGentooを試してみるそうです。どうなるかまだわかりませんけど。 これまで述べたように、Gentooはセキュリティ部門で中心的な存在を占めています。コロンビア全体では、まだまだこれからですけどね。

過去の [[GWN]] より転載。

________

[[Gentoo]] ([[Gentoo Linux:http://wiki.gentoo.gr.jp/index.php?GentooLinux]]) の詳細は[[プロジェクトリスト:http://www.gentoo.org/proj/en/metastructure/projects.xml]]が確実です。短時間で概要を説明しようとしたものが以下にあります。気にいったら足して下さい。

- [[Gentoo]] ([[Gentoo Linux:http://wiki.gentoo.gr.jp/index.php?GentooLinux]]), [[Gentoo FAQ:http://www.gentoo.org/doc/ja/?catid=faq]], [[GentooJP FAQ:http://wiki.gentoo.gr.jp/index.php?%5B%5B%A3%C6%A3%C1%A3%D1%5D%5D]]
- [[インストール]], [[Stage]], [[GRP]], [[Portageツリー]]
- [[インストールした後にできること]], [[日本語入力設定事例集]], [[日本語デスクトップ環境/パッケージ]]
- [[Gentooが採用している技術]]
- [[コミュニティとの連絡手段]], [[Bugtracking System (Bugzilla):http://wiki.gentoo.gr.jp/index.php?BugtrackingSystem]]
- [[本家に関連しそうな言葉]], [[GLEP]], [[コピーライト]], [[ライセンス]]

[[Portage]] ([[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]]) の詳細は[[ドキュメントリスト:http://www.gentoo.org/doc/ja/list.xml]]が確実です。短時間で概要を説明しようとしたものが以下にあります。気にいったら足して下さい。

- [[Portage]] ([[Gentoo System:http://wiki.gentoo.gr.jp/index.php?GentooSystem]])
- [[メタ・ディストリビューション]], [[USEフラグ]], [[profile]], [[catalyst]], [[GNAP]]
- [[コンパイル]], [[バイナリパッケージ]]
- [[portageとその周辺ツール]], [[portageに関連しそうな言葉]]
- [[ebuildパッケージ]], [[ebuildに関連しそうな言葉]]

________

-[2006-09-17] 便利なものを見つけたら足して下さい。 (yoshino)
