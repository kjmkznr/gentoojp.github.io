#contents
#title

*Gentoo と C++ [#uecd2fca]

C++言語のことです。

UNIX 系は [[C]] が中心ですが、[[Gentoo]] や [[Gentoo_Package_Manager]] を学ぶのにもっと新しい流行りの言語を辞めて改宗する必要はありません。[[C]] や [[C++]] は、UNIX 系に限らず [[C]] や [[C++]] でしかできない分野では現役というか他に選択肢がありません。恐らく 10 年後でも同じでしょう。

揃うまでが早いことは苦手かもしれません。揃うまでが易いことも苦手かもしれません。他にも苦手なものがあるでしょう。でもシステムとして小さいことが付加価値になることがあります。システムとして速いことが付加価値になることもあります。他にも得意なものがあるでしょう。其処に前提条件が加わりますし、技術的な視点も加わりますし、会計的な視点も加わります。

GPM/Ports System ([[Gentoo_Package_Manager]]) の一種である [[Portage]] は [[Python]] と [[Bash]] です。黎明期に創始者が判断しました(この方は [[C]] と [[C++]] の記事も書いてます)。[[Paludis]] は [[C++]] と [[Bash]] です。新しく作り直そうとした別の開発者が判断しました(この方は [[Ruby]] の記事も書いてます)。余談ですが FAQ の「本当はね C で書きたかったんだ、でも人材不足と時間不足でさ、C++ なのは分ってくれますよね」はハッカージョークです。Bash や Sed で妥協せず Genash から Gensed まで全てを作り直したかったぐらいのニュアンスです。[[Python]]、[[Bash]]、[[C]]、[[C++]]、[[bash_for_ebuild]] に関連記事があります。

***「C」(辞書検索例) [#cf14fce4]

[[wikipedia:http://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8]] の「[[C:http://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E]]」参考。

***「C++」(辞書検索例) [#r598ced8]

[[wikipedia:http://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8]] の「[[C++:http://ja.wikipedia.org/wiki/C%2B%2B]]」参考。

*C++ を学ぶ [#j2e089a7]

本家への案内を意識すると、[[C++]] の知識は必ずしも必要とされません。

[[C]] は [[Python]] や [[Bash]] と異なり何冊か参考書を購入するのが確実です。個人的には雑誌とかが必要以上に欠点だけを攻めている印象があるので、おそらく想像しているよりはずっと簡単です。「どうして [[C]] の欠点が攻められるのか」の理由は、プログラミング言語の解説本とは違う本棚にあります。C99 が新しい規格ですが、C89 でも良書が無難です。記述スタイルに関する考察やツールの知識は更に別の参考書になります。

ちなみに、[[C++]] も視野に入れるのであれば C から STL まで連続して何冊も読み続けると「プログラミング言語に必要なもの」が分り易い気もしますが、D&E (ソフトバンク　パブリッシングの『C++の設計と進化』) には C++ から C だとあります。「何故 C++ から C なのか」もプログラミング言語の解説書とは違う本棚にあるかもしれません。名前は似ていますが、C と C++ は全く別の考えです。C++ は STL (Boost 含む)で評価してみて下さい。C++98 が規格ですが、委員会が元気です。

デベロッパの条件に [[C++]] は必要ではありませんが、[[C]] や [[C++]] を知るデベロッパは喜ばれます。現役や本職でなくとも、必要とされる人数を考えると貴重です。

**ソフトウェアエンジニアリング [#l7490fb4]

プログラミング言語やスクリプト言語だけに夢中にならないで下さい。品質保証やモデリングやダイアグラミングなど書籍が沢山あると思います。セキュアなコードについても忘れないで下さい。

**Gentoo は 11000 種 24000 枚もあるから自分でプログラミングする機会がないのですか？ [#pbb4615c]

[[Portageツリー]]に登録されていないソフトウェアを[[バグ報告]]で申請もしくは [[Portageオーバーレイ]]へ追加するとしてその数が 100000 になったとしても新しいソフトウェアはこれからも必要とされます。新しい次元では 0 種 0 枚だからです。10 年後でも同じです。それにプログラミングは 10 年後でもきっと面白いです。一から作るのは楽しいです。既にあるウェブサービス分野や人工知能分野やデータベース分野や……も価値を作るなり変えるなり壊すなりすれば新しい次元です。これも楽しいです。ソフトウェア工学、離散数学、数値計算、……は問題解決の助けになるかもしれません。保守も忘れないで下さい。

例として [[Gentoo]] で熱意あるプロジェクトの一つに [[Science プロジェクト:http://www.gentoo.org/proj/en/science/index.xml]] があります。LAPACK (計算ライブラリ)と BLAS (LAPACK の高速処理ライブラリ)について説明があります。並列プログラミングのドキュメントはありませんが、 MPI (並列処理ライブラリ)は複数候補より選択できます。`eix --description "mpi( |＼)|$)"` で分ります。Beowulf (PC クラスタの概念)の直接的なドキュメントはありませんが、 [[Gentoo]] の得意分野の一つです。もしかしたら「ジェンツー愛好者は数学系も [[Fortran]] や [[C]] や [[Lisp]] で誰もが記述しそう」と思うかもしれませんが、[[sci-mathematics/octave]] (Matlab 系の GPL-2 ライセンス)や [[sci-mathematics/maxima]] (Macsyma 系の GPL-2/AECA ライセンス)や [[dev-lang/R]] (S 系の GPL-2/LGPL-2.1 ライセンス) ……といったソフトウェアが揃ってます。

**コードを書く時間と本を読む時間 [#v951ca88]

これから[[メタ・ディストリビューション]]を始める人は、どちらかに偏り過ぎないで下さい。コードを書く時間だけでは好悪による不安定な問題解決になり、本を読む時間だけでは一般化し過ぎて前提条件と現場の変化に対応できないからです。形式知や暗黙知は経営学の範囲ですが難しく考えず、時間の許す限り、コードを書いて勉強してコードを書いて勉強して……を繰返してみて下さい。

________

-[2007-05-04] C++ についての O'REILLY のは読んでないです。初めの一冊に TC++PL 3e (アジソンウェスレイパブリッシャーズジャパンの『プログラミング言語 C++ 第 3 版』)は無謀だと思います……二、三冊目ぐらい？良い参考書があったら書き足して下さい。 (yoshino)
